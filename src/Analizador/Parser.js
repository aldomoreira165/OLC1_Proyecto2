/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,28],$V2=[1,30],$V3=[1,23],$V4=[1,21],$V5=[1,24],$V6=[1,27],$V7=[1,25],$V8=[1,26],$V9=[1,22],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[5,9,27,28,32,34,43,52,55,56,57,60,61,62,63,64,65],$Vg=[1,46],$Vh=[1,52],$Vi=[1,51],$Vj=[1,59],$Vk=[1,66],$Vl=[1,67],$Vm=[1,69],$Vn=[1,78],$Vo=[1,79],$Vp=[1,80],$Vq=[1,81],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,65],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[31,34,39,45],$VB=[2,29],$VC=[1,85],$VD=[1,115],$VE=[1,116],$VF=[1,121],$VG=[1,108],$VH=[1,109],$VI=[1,110],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[9,11,31,40,44,45,49,50,66,75,76,77,78,79,80,81,82,83,84,85],$VS=[1,146],$VT=[9,31,66],$VU=[5,9,27,28,32,34,43,52,54,55,56,57,60,61,62,63,64,65],$VV=[1,181],$VW=[9,11,31,40,44,45,49,50,66,75,76,80,81,82,83,84,85],$VX=[9,11,31,40,44,45,49,50,66,75,76,77,78,80,81,82,83,84,85],$VY=[9,11,31,40,49,50,66,80,81,84,85],$VZ=[9,11,31,40,44,45,49,50,66,80,81,82,83,84,85],$V_=[31,66],$V$=[1,235];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"tmain":27,"tPrint":28,"(":29,"LISTA_EXP":30,")":31,"treturn":32,"EXP":33,"id":34,"++":35,"--":36,"TIPO":37,"=":38,"[":39,"]":40,"tnew":41,"entero":42,"tlist":43,"<":44,">":45,".":46,"tadd":47,"TERNARIA":48,"?":49,":":50,"CASTEO":51,"tif":52,"ELSE":53,"telse":54,"tdo":55,"twhile":56,"tfor":57,"ACTUALIZACION_FOR":58,"LISTA_PARAM":59,"tvoid":60,"tinteger":61,"tboolean":62,"tstring":63,"tdouble":64,"tchar":65,",":66,"FUNCIONES_LENGUAJE":67,"ttoLower":68,"ttoUpper":69,"ttruncate":70,"tround":71,"ttoCharArray":72,"ttoString":73,"ttypeOf":74,"+":75,"-":76,"*":77,"/":78,"^":79,"==":80,"!=":81,"<=":82,">=":83,"&&":84,"||":85,"decimal":86,"caracter":87,"cadena":88,"ttrue":89,"tfalse":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",27:"tmain",28:"tPrint",29:"(",31:")",32:"treturn",34:"id",35:"++",36:"--",38:"=",39:"[",40:"]",41:"tnew",42:"entero",43:"tlist",44:"<",45:">",46:".",47:"tadd",49:"?",50:":",52:"tif",54:"telse",55:"tdo",56:"twhile",57:"tfor",60:"tvoid",61:"tinteger",62:"tboolean",63:"tstring",64:"tdouble",65:"tchar",66:",",68:"ttoLower",69:"ttoUpper",70:"ttruncate",71:"tround",72:"ttoCharArray",73:"ttoString",74:"ttypeOf",75:"+",76:"-",77:"*",78:"/",79:"^",80:"==",81:"!=",82:"<=",83:">=",84:"&&",85:"||",86:"decimal",87:"caracter",88:"cadena",89:"ttrue",90:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[25,2],[24,4],[26,2],[26,3],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[10,7],[15,4],[16,7],[13,7],[48,5],[51,4],[14,8],[17,5],[17,6],[53,2],[53,2],[21,7],[20,9],[20,9],[19,5],[12,6],[12,6],[12,5],[12,5],[37,1],[37,1],[37,1],[37,1],[37,1],[59,4],[59,2],[30,3],[30,1],[18,3],[18,4],[58,2],[58,2],[67,4],[67,4],[67,4],[67,4],[67,4],[67,4],[67,4],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,4],[33,6],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 9: case 13: case 17: case 18: case 19: case 20:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 10: case 11: case 12: case 14: case 15: case 16: case 21: case 22:
 this.$ = $$[$0]; 
break;
case 23:
 this.$ = new LlamadaPrint($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 24:
 this.$ = new ReturnPR(undefined,_$[$0].first_line, _$[$0].first_column); 
break;
case 25:
  this.$ = new ReturnPR($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 26:

                this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 27:

                this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 28:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 29:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 30:

                this.$ = new DeclararArreglo($$[$0-9], $$[$0-6], $$[$0-3],undefined, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
            
break;
case 31:

                this.$ = new DeclararArreglo($$[$0-7], $$[$0-4],undefined, $$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 32:

                this.$ = new DeclararLista($$[$0-8], $$[$0-6], $$[$0-1],undefined, _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 33:

                this.$ = new DeclararLista($$[$0-4], $$[$0-2], undefined, $$[$0],  _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 34:

                this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 35:

                this.$ = new AsignacionVector($$[$0-6], $$[$0-1], $$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 36:

                this.$ = new InsertarLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 37:

            this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 38:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 39:

                this.$ = new ModificarLista($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 40:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 41:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 42:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 43:

            this.$ = $$[$0];
        
break;
case 44:

            this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column );
        
break;
case 45: case 46:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 47:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 48:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 49:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 50:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 51:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 52:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 53:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 54:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 55:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 56:
 this.$ = new Tipo(TipoPrimitivo.Char);  
break;
case 57:

                let decla=new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column)
                $$[$0-3].push(decla);
                this.$ = $$[$0-3];
            
break;
case 58:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 59:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 60:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 61:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);    
break;
case 62:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 63:

           this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 64:

           this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
        
break;
case 65: case 66: case 67: case 68: case 69: case 70: case 71:
this.$ = new FuncionLenguaje($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 72: case 73: case 74: case 75: case 76:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 77:
 this.$ = new OperacionAritmetica($$[$0], "negativo", $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 78:
 this.$ = $$[$0-1];
break;
case 79: case 80: case 81: case 82: case 83: case 84:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 85: case 86:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 88:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);        
break;
case 89:
 this.$ = new AccesoLista($$[$0-5],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column);        
break;
case 90: case 97: case 98: case 99:
 this.$ = $$[$0];
break;
case 91:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 92:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 93:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 94:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 95:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 96:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:$V0,28:$V1,32:$V2,34:$V3,37:20,43:$V4,52:$V5,55:$V6,56:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{1:[3]},{5:[1,36],6:37,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:$V0,28:$V1,32:$V2,34:$V3,37:20,43:$V4,52:$V5,55:$V6,56:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},o($Vf,[2,3]),{11:[1,38]},o($Vf,[2,7]),o($Vf,[2,8]),{11:[1,39]},o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),{11:[1,40]},o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{11:[1,41]},{11:[1,42]},{11:[1,43]},{11:[1,44]},o($Vf,[2,21]),{34:[1,45],39:$Vg},{44:[1,47]},{34:[1,48]},{29:$Vh,35:[1,53],36:[1,54],38:$Vi,39:[1,50],46:[1,49]},{29:[1,55]},{29:[1,56]},{29:[1,57]},{7:58,8:$Vj},{29:[1,60]},{18:61,34:[1,62]},{11:[1,63],18:68,29:$Vk,33:64,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VA,[2,52]),o($VA,[2,53]),o($VA,[2,54]),o($VA,[2,55]),o($VA,[2,56]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,6]),o($Vf,[2,9]),o($Vf,[2,13]),o($Vf,[2,17]),o($Vf,[2,18]),o($Vf,[2,19]),o($Vf,[2,20]),{11:$VB,29:[1,86],38:$VC},{40:[1,87]},{37:88,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{29:[1,89]},{47:[1,90]},{39:[1,91],42:[1,92]},{18:68,29:$Vk,33:93,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,30:95,31:[1,94],33:96,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{11:[2,26]},{11:[2,27]},{18:68,29:$Vk,33:97,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:98,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{10:99,15:100,34:[1,102],37:101,43:$V4,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{56:[1,103]},{4:104,6:3,9:[1,105],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:$V0,28:$V1,32:$V2,34:$V3,37:20,43:$V4,52:$V5,55:$V6,56:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{18:68,29:$Vk,30:106,33:96,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{11:[2,22]},{29:$Vh},o($Vf,[2,24]),{11:[1,107],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{18:68,29:$Vk,33:122,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:123,34:$Vl,37:124,42:$Vm,48:75,51:76,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VR,[2,87],{29:$Vh,39:[1,125]}),o($VR,[2,90]),o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,93]),o($VR,[2,94]),o($VR,[2,95]),o($VR,[2,96]),o($VR,[2,97]),o($VR,[2,98]),o($VR,[2,99]),{29:[1,126]},{29:[1,127]},{29:[1,128]},{29:[1,129]},{29:[1,130]},{29:[1,131]},{29:[1,132]},{18:68,29:$Vk,33:133,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{31:[1,135],37:136,59:134,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{34:[1,137]},{45:[1,138]},{31:[1,140],37:136,59:139,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{29:[1,141]},{42:[1,142]},{40:[1,143]},{11:[1,144],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,61]),{31:[1,145],66:$VS},o($VT,[2,60],{44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),{31:[1,147],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,148],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:[1,149]},{11:[1,150]},{34:[1,151],39:$Vg},{38:$Vi},{29:[1,152]},{6:37,9:[1,153],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:$V0,28:$V1,32:$V2,34:$V3,37:20,43:$V4,52:$V5,55:$V6,56:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},o($VU,[2,5]),{31:[1,154],66:$VS},o($Vf,[2,25]),{18:68,29:$Vk,33:155,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:156,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:157,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:158,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:159,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:160,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:161,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:162,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:163,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:164,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:165,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:166,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:167,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:168,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VR,[2,77]),{31:[1,169],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,170]},{18:68,29:$Vk,33:171,34:$Vl,39:[1,172],42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:173,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:174,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:175,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:176,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:177,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:178,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:179,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{11:[2,28],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,180],66:$VV},{7:182,8:$Vj},{34:[1,183]},{38:[1,184]},{34:[1,185]},{31:[1,186],66:$VV},{7:187,8:$Vj},{18:68,29:$Vk,33:188,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{40:[1,189]},{38:[1,190]},o([5,9,11,27,28,32,34,43,52,55,56,57,60,61,62,63,64,65],[2,34]),o($VR,[2,62]),{18:68,29:$Vk,33:191,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{7:192,8:$Vj},{7:193,8:$Vj},{18:68,29:$Vk,33:194,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:195,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{11:$VB,38:$VC},{18:68,29:$Vk,33:196,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VU,[2,4]),{11:[2,23]},o($VW,[2,72],{77:$VI,78:$VJ,79:$VK}),o($VW,[2,73],{77:$VI,78:$VJ,79:$VK}),o($VX,[2,74],{79:$VK}),o($VX,[2,75],{79:$VK}),o($VX,[2,76],{79:$VK}),o($VY,[2,79],{44:$VD,45:$VE,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,82:$VN,83:$VO}),o($VY,[2,80],{44:$VD,45:$VE,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,82:$VN,83:$VO}),o($VZ,[2,81],{75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($VZ,[2,82],{75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($VZ,[2,83],{75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o($VZ,[2,84],{75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK}),o([9,11,31,40,50,66,84,85],[2,85],{44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o([9,11,31,40,50,66,85],[2,86],{44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),{44:$VD,45:$VE,49:$VF,50:[1,197],75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,78]),{18:68,29:$Vk,33:198,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{40:[1,199],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{18:68,29:$Vk,33:200,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{31:[1,201],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,202],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,203],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,204],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,205],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,206],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,207],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{7:208,8:$Vj},{37:209,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},o($Vf,[2,50]),o($V_,[2,58]),{8:[1,211],41:[1,210]},{38:[1,212]},{7:213,8:$Vj},o($Vf,[2,51]),{31:[1,214],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{40:[1,215]},{18:68,29:$Vk,33:216,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VT,[2,59],{44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ}),o($Vf,[2,40],{53:217,54:[1,218]}),o($Vf,[2,47]),{11:[1,219],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{11:[1,220],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{31:[1,221],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{18:68,29:$Vk,33:222,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($VR,[2,38]),o($VR,[2,88]),{40:[1,223],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),o($VR,[2,69]),o($VR,[2,70]),o($VR,[2,71]),o($Vf,[2,48]),{34:[1,224]},{37:225,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},{18:68,29:$Vk,30:226,33:96,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},{18:68,29:$Vk,33:228,34:$Vl,41:[1,227],42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($Vf,[2,49]),{11:[1,229]},{38:[1,230]},{11:[1,231],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($Vf,[2,41]),{7:233,8:$Vj,17:232,52:$V5},{34:$V$,58:234},{34:$V$,58:236},{11:[1,237]},o([9,11,31,40,49,50,66,84,85],[2,37],{44:$VD,45:$VE,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),{40:[1,238]},o($V_,[2,57]),{39:[1,239]},{9:[1,240],66:$VS},{43:[1,241]},{11:[2,33],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},o($Vf,[2,36]),{18:68,29:$Vk,33:242,34:$Vl,42:$Vm,48:75,51:76,67:77,68:$Vn,69:$Vo,70:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,76:$Vu,86:$Vv,87:$Vw,88:$Vx,89:$Vy,90:$Vz},o($Vf,[2,35]),o($Vf,[2,42]),o($Vf,[2,43]),{31:[1,243]},{35:[1,244],36:[1,245]},{31:[1,246]},o($Vf,[2,44]),o($VR,[2,89]),{42:[1,247]},{11:[2,31]},{44:[1,248]},{11:[2,39],44:$VD,45:$VE,49:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ},{7:249,8:$Vj},{31:[2,63]},{31:[2,64]},{7:250,8:$Vj},{40:[1,251]},{37:252,61:$Va,62:$Vb,63:$Vc,64:$Vd,65:$Ve},o($Vf,[2,45]),o($Vf,[2,46]),{11:[2,30]},{45:[1,253]},{11:[2,32]}],
defaultActions: {36:[2,1],53:[2,26],54:[2,27],61:[2,22],154:[2,23],240:[2,31],244:[2,63],245:[2,64],251:[2,30],253:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let DeclararArreglo             =   require("../Instrucciones/DeclararArreglo").DeclararArreglo;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let AsignacionVector            =   require("../Instrucciones/AsignacionVector").AsignacionVector;
    let Ternario                    =   require("../Expresiones/Ternario").Ternario;
    let If                          =   require("../Instrucciones/If").If;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let AccesoLista                 =   require("../Expresiones/AccesoLista").AccesoLista;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let LlamadaPrint                =   require("../Expresiones/LlamadaPrint").LlamadaPrint;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let FuncionLenguaje             =   require("../Expresiones/FuncionLenguaje").FuncionLenguaje;
    let While                       =   require("../Instrucciones/While").While;
    let ReturnPR                    =   require("../Expresiones/ReturnPR").ReturnPR;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let Incremento                  =   require("../Instrucciones/Incremento").Incremento;
    let Decremento                  =    require("../Instrucciones/Decremento").Decremento;
    let For                         =    require("../Instrucciones/For").For;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Casteo                      =    require("../Expresiones/Casteo").Casteo;
    let InsertarLista               =    require("../Instrucciones/InsertarLista").InsertarLista;
    let ModificarLista              =    require("../Instrucciones/ModificarLista").ModificarLista;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 89;     
break;
case 5:   return 90;    
break;
case 6:   return 61;  
break;
case 7:   return 62;  
break;
case 8:   return 64;   
break;
case 9:   return 63;   
break;
case 10:   return 65;   
break;
case 11:   return 52;       
break;
case 12:   return 56;    
break;
case 13:   return 57;    
break;
case 14:   return 54;     
break;
case 15:   return 60;     
break;
case 16:   return 32;   
break;
case 17:   return 41;     
break;
case 18:   return 55;     
break;
case 19:   return 43;     
break;
case 20:   return 47;     
break;
case 21:   return 'tswitch';     
break;
case 22:   return 'tcase';     
break;
case 23:   return 'tdefault';     
break;
case 24:   return 68;     
break;
case 25:   return 69;     
break;
case 26:   return 70;     
break;
case 27:   return 71;     
break;
case 28:   return 'tlength';     
break;
case 29:   return 74;     
break;
case 30:   return 73;     
break;
case 31:   return 72;     
break;
case 32:   return 27;     
break;
case 33:   return 28;    
break;
case 34:yy_.yytext = yy_.yytext.toLowerCase();          return 34;
break;
case 35:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 88;
break;
case 36:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 87
break;
case 37:return 86
break;
case 38:return 42
break;
case 39:return '$'
break;
case 40:return 46
break;
case 41:return 35;
break;
case 42:return 36;
break;
case 43:return 75;
break;
case 44:return 76;
break;
case 45:return 77;
break;
case 46:return 78;
break;
case 47:return 79;
break;
case 48:return '%';
break;
case 49:return 29;
break;
case 50:return 31;
break;
case 51:return 80;
break;
case 52:return 38;
break;
case 53:return 66;
break;
case 54:return 50;
break;
case 55:return 11;
break;
case 56:return 49;
break;
case 57:return 85;
break;
case 58:return 84;
break;
case 59:return 81;
break;
case 60:return '!';
break;
case 61:return 82;
break;
case 62:return 83;
break;
case 63:return 45;
break;
case 64:return 44;
break;
case 65:return 8;
break;
case 66:return 9;
break;
case 67:return 39;
break;
case 68:return 40;
break;
case 69: console.log(`El caracter: "${yy_.yytext}" no pertenece al lenguaje`); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:length\b)/,/^(?:typeOf\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}