/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,33],$V2=[1,32],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,27],$V7=[1,25],$V8=[1,28],$V9=[1,31],$Va=[1,29],$Vb=[1,30],$Vc=[1,26],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,42],$Vi=[1,37],$Vj=[2,5,9,30,31,35,37,38,39,48,57,60,61,62,65,66,67,68,69,70,72,76,78],$Vk=[1,55],$Vl=[1,61],$Vm=[1,60],$Vn=[1,68],$Vo=[1,75],$Vp=[1,76],$Vq=[1,78],$Vr=[1,87],$Vs=[1,88],$Vt=[1,89],$Vu=[1,90],$Vv=[1,91],$Vw=[1,92],$Vx=[1,93],$Vy=[1,94],$Vz=[1,74],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[34,39,44,50],$VG=[2,35],$VH=[1,98],$VI=[1,129],$VJ=[1,130],$VK=[1,135],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,131],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[9,11,34,45,49,50,54,55,71,88,89,90,91,92,93,94,95,96,97,98,99],$VY=[1,161],$VZ=[9,34,71],$V_=[2,5,9,30,31,35,37,38,39,48,57,59,60,61,62,65,66,67,68,69,70,72,76,78],$V$=[1,199],$V01=[9,11,34,45,49,50,54,55,71,88,89,94,95,96,97,98,99],$V11=[9,11,34,45,49,50,54,55,71,88,89,90,91,93,94,95,96,97,98,99],$V21=[9,11,34,45,54,55,71,94,95,98,99],$V31=[9,11,34,45,49,50,54,55,71,94,95,96,97,98,99],$V41=[34,71],$V51=[1,248],$V61=[1,249],$V71=[1,261],$V81=[9,76,78],$V91=[1,269];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"LISTA_ADD":13,"LISTA_MODIFICAR":14,"ASIGNACION":15,"VECTOR_ADD":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"FOR":20,"DO_WHILE":21,"INCREMENTO":22,"DECREMENTO":23,"PRINT":24,"MAIN":25,"RETURN":26,"CONTINUE":27,"BREAK":28,"SWITCH":29,"tmain":30,"tPrint":31,"(":32,"LISTA_EXP":33,")":34,"treturn":35,"EXP":36,"tContinue":37,"tBreak":38,"id":39,"++":40,"--":41,"TIPO":42,"=":43,"[":44,"]":45,"tnew":46,"entero":47,"tlist":48,"<":49,">":50,".":51,"tadd":52,"TERNARIA":53,"?":54,":":55,"CASTEO":56,"tif":57,"ELSE":58,"telse":59,"tdo":60,"twhile":61,"tfor":62,"ACTUALIZACION_FOR":63,"LISTA_PARAM":64,"tvoid":65,"tinteger":66,"tboolean":67,"tstring":68,"tdouble":69,"tchar":70,",":71,"tswitch":72,"BLOCK_SWITCH":73,"L_CASE":74,"CASES":75,"tcase":76,"BLOCK_CASES":77,"tdefault":78,"FUNCIONES_LENGUAJE":79,"ttoLower":80,"ttoUpper":81,"ttruncate":82,"tround":83,"ttoCharArray":84,"ttoString":85,"ttypeOf":86,"tlength":87,"+":88,"-":89,"*":90,"/":91,"^":92,"%":93,"==":94,"!=":95,"<=":96,">=":97,"&&":98,"||":99,"decimal":100,"caracter":101,"cadena":102,"ttrue":103,"tfalse":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",30:"tmain",31:"tPrint",32:"(",34:")",35:"treturn",37:"tContinue",38:"tBreak",39:"id",40:"++",41:"--",43:"=",44:"[",45:"]",46:"tnew",47:"entero",48:"tlist",49:"<",50:">",51:".",52:"tadd",54:"?",55:":",57:"tif",59:"telse",60:"tdo",61:"twhile",62:"tfor",65:"tvoid",66:"tinteger",67:"tboolean",68:"tstring",69:"tdouble",70:"tchar",71:",",72:"tswitch",76:"tcase",78:"tdefault",80:"ttoLower",81:"ttoUpper",82:"ttruncate",83:"tround",84:"ttoCharArray",85:"ttoString",86:"ttypeOf",87:"tlength",88:"+",89:"-",90:"*",91:"/",92:"^",93:"%",94:"==",95:"!=",96:"<=",97:">=",98:"&&",99:"||",100:"decimal",101:"caracter",102:"cadena",103:"ttrue",104:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[25,2],[24,4],[26,2],[26,3],[27,2],[28,2],[22,2],[23,2],[10,4],[10,2],[10,10],[10,8],[10,11],[10,7],[15,3],[16,7],[13,7],[53,5],[56,4],[14,8],[17,5],[17,6],[58,2],[58,2],[21,7],[20,9],[20,9],[19,5],[12,6],[12,6],[12,5],[12,5],[42,1],[42,1],[42,1],[42,1],[42,1],[64,4],[64,2],[33,3],[33,1],[18,3],[18,4],[63,2],[63,2],[63,3],[29,5],[73,3],[73,2],[74,2],[74,1],[75,3],[75,2],[77,2],[77,1],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[79,4],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,4],[36,6],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 9: case 10: case 13: case 17: case 18: case 19: case 20: case 73:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 11: case 12: case 14: case 15: case 16: case 21: case 22: case 23: case 24: case 26: case 79:
 this.$ = $$[$0]; 
break;
case 25:
 TablaError.insertarError(new Error("Sint√°ctico", "falta ;", this._$.first_line, this._$.first_column)); 
break;
case 27:
 this.$ = new LlamadaPrint($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 28:
 this.$ = new ReturnPR(undefined,_$[$0].first_line, _$[$0].first_column); 
break;
case 29:
  this.$ = new ReturnPR($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 30:
 this.$ = new Continue(_$[$0].first_line, _$[$0].first_column); 
break;
case 31:
 this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 32:

                this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 33:

                this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 34:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 35:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 36:

                this.$ = new DeclararArreglo($$[$0-9], $$[$0-6], $$[$0-3],undefined, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
            
break;
case 37:

                this.$ = new DeclararArreglo($$[$0-7], $$[$0-4],undefined, $$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 38:

                this.$ = new DeclararLista($$[$0-8], $$[$0-6], $$[$0-1],undefined, _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 39:

                this.$ = new DeclararLista($$[$0-4], $$[$0-2], undefined, $$[$0],  _$[$0-5].first_line, _$[$0-5].first_column);
            
break;
case 40:

                this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 41:

                this.$ = new AsignacionVector($$[$0-6], $$[$0-1], $$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 42:

                this.$ = new InsertarLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 43:

            this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 44:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 45:

                this.$ = new ModificarLista($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 46:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 47:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 48:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 49:

            this.$ = $$[$0];
        
break;
case 50:

            this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column );
        
break;
case 51: case 52:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 53:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 54:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 55:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 56:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 57:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 58:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 59:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 60:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 61:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 62:
 this.$ = new Tipo(TipoPrimitivo.Char);  
break;
case 63:

                let decla=new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column)
                $$[$0-3].push(decla);
                this.$ = $$[$0-3];
            
break;
case 64:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 65:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 66:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 67:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);    
break;
case 68:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 69:

           this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 70:

           this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
        
break;
case 71:

           this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
        
break;
case 72:
 this.$ = new Switch($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 74: case 80:
 this.$ = []; 
break;
case 75:
 this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 76:
 this.$=[]; this.$.push($$[$0]); 
break;
case 77:
 this.$ = new CaseSwitch($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 78:
 this.$ = new CaseSwitch(null, $$[$0], this._$.first_line, this._$.first_column);
break;
case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88:
this.$ = new FuncionLenguaje($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 89: case 90: case 91: case 92: case 93: case 94:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 95:
 this.$ = new OperacionAritmetica($$[$0], "negativo", $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 96:
 this.$ = $$[$0-1];
break;
case 97: case 98: case 99: case 100: case 101: case 102:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 103: case 104:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 106:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);        
break;
case 107:
 this.$ = new AccesoLista($$[$0-5],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column);        
break;
case 108: case 115: case 116: case 117:
 this.$ = $$[$0];
break;
case 109:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 110:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 112:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 113:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 114:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,42:24,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi},{1:[3]},{2:$V0,5:[1,43],6:44,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,42:24,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi},o($Vj,[2,3]),{11:[1,45]},o($Vj,[2,7]),o($Vj,[2,8]),{11:[1,46]},{11:[1,47]},o($Vj,[2,11]),o($Vj,[2,12]),{11:[1,48]},o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),{11:[1,49]},{11:[1,50]},{11:[1,51]},{11:[1,52]},o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),o($Vj,[2,24]),{11:[1,53]},{39:[1,54],44:$Vk},{49:[1,56]},{39:[1,57]},{32:$Vl,40:[1,62],41:[1,63],43:$Vm,44:[1,59],51:[1,58]},{32:[1,64]},{32:[1,65]},{32:[1,66]},{7:67,8:$Vn},{32:[1,69]},{18:70,39:[1,71]},{11:[1,72],18:77,32:$Vo,36:73,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{11:[1,95]},{11:[1,96]},{32:[1,97]},o($VF,[2,58]),o($VF,[2,59]),o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,6]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,13]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,25]),{11:$VG,32:[1,99],43:$VH},{45:[1,100]},{42:101,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},{32:[1,102]},{52:[1,103]},{18:77,32:$Vo,36:105,39:$Vp,44:[1,104],47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:106,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,33:108,34:[1,107],36:109,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{11:[2,32]},{11:[2,33]},{18:77,32:$Vo,36:110,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:111,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{10:112,15:113,39:[1,115],42:114,48:$V7,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},{61:[1,116]},{2:$V0,4:117,6:3,9:[1,118],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,42:24,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi},{18:77,32:$Vo,33:119,36:109,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{11:[2,26]},{32:$Vl},o($Vj,[2,28]),{11:[1,120],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{18:77,32:$Vo,36:136,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:137,39:$Vp,42:138,47:$Vq,53:84,56:85,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($VX,[2,105],{32:$Vl,44:[1,139]}),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),o($VX,[2,112]),o($VX,[2,113]),o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,116]),o($VX,[2,117]),{32:[1,140]},{32:[1,141]},{32:[1,142]},{32:[1,143]},{32:[1,144]},{32:[1,145]},{32:[1,146]},{32:[1,147]},o($Vj,[2,30]),o($Vj,[2,31]),{18:77,32:$Vo,36:148,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:149,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{34:[1,151],42:152,64:150,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},{39:[1,153]},{50:[1,154]},{34:[1,156],42:152,64:155,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},{32:[1,157]},{18:77,32:$Vo,36:158,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{45:[1,159],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{11:[2,40],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($VX,[2,67]),{34:[1,160],71:$VY},o($VZ,[2,66],{49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW}),{34:[1,162],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,163],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{11:[1,164]},{11:[1,165]},{39:[1,166],44:$Vk},{43:$Vm},{32:[1,167]},{2:$V0,6:44,9:[1,168],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,42:24,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi},o($V_,[2,5]),{34:[1,169],71:$VY},o($Vj,[2,29]),{18:77,32:$Vo,36:170,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:171,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:172,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:173,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:174,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:175,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:176,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:177,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:178,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:179,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:180,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:181,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:182,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:183,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:184,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($VX,[2,95]),{34:[1,185],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,186]},{18:77,32:$Vo,36:187,39:$Vp,44:[1,188],47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:189,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:190,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:191,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:192,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:193,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:194,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:195,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:196,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{34:[1,197],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{11:[2,34],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,198],71:$V$},{7:200,8:$Vn},{39:[1,201]},{43:[1,202]},{39:[1,203]},{34:[1,204],71:$V$},{7:205,8:$Vn},{18:77,32:$Vo,36:206,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{45:[1,207],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{43:[1,208]},o($VX,[2,68]),{18:77,32:$Vo,36:209,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{7:210,8:$Vn},{7:211,8:$Vn},{18:77,32:$Vo,36:212,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:213,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{11:$VG,43:$VH},{18:77,32:$Vo,36:214,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($V_,[2,4]),{11:[2,27]},o($V01,[2,89],{90:$VN,91:$VO,92:$VP,93:$VQ}),o($V01,[2,90],{90:$VN,91:$VO,92:$VP,93:$VQ}),o($V11,[2,91],{92:$VP}),o($V11,[2,92],{92:$VP}),o($V11,[2,93],{92:$VP}),o($V11,[2,94],{92:$VP}),o($V21,[2,97],{49:$VI,50:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,96:$VT,97:$VU}),o($V21,[2,98],{49:$VI,50:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,96:$VT,97:$VU}),o($V31,[2,99],{88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ}),o($V31,[2,100],{88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ}),o($V31,[2,101],{88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ}),o($V31,[2,102],{88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ}),o([9,11,34,45,55,71,98,99],[2,103],{49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU}),o([9,11,34,45,55,71,99],[2,104],{49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV}),{49:$VI,50:$VJ,54:$VK,55:[1,215],88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($VX,[2,96]),{18:77,32:$Vo,36:216,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{45:[1,217],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{18:77,32:$Vo,36:218,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{34:[1,219],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,220],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,221],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,222],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,223],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,224],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,225],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,226],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{8:[1,228],73:227},{7:229,8:$Vn},{42:230,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},o($Vj,[2,56]),o($V41,[2,64]),{8:[1,232],46:[1,231]},{43:[1,233]},{7:234,8:$Vn},o($Vj,[2,57]),{34:[1,235],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{45:[1,236]},{18:77,32:$Vo,36:237,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($VZ,[2,65],{49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW}),o($Vj,[2,46],{58:238,59:[1,239]}),o($Vj,[2,53]),{11:[1,240],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{11:[1,241],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{34:[1,242],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{18:77,32:$Vo,36:243,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($VX,[2,44]),o($VX,[2,106]),{45:[1,244],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($VX,[2,81]),o($VX,[2,82]),o($VX,[2,83]),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o($Vj,[2,72]),{9:[1,246],74:245,75:247,76:$V51,78:$V61},o($Vj,[2,54]),{39:[1,250]},{42:251,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},{18:77,32:$Vo,33:252,36:109,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{18:77,32:$Vo,36:254,39:$Vp,46:[1,253],47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($Vj,[2,55]),{11:[1,255]},{43:[1,256]},{11:[1,257],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($Vj,[2,47]),{7:259,8:$Vn,17:258,57:$V8},{39:$V71,63:260},{39:$V71,63:262},{11:[1,263]},o([9,11,34,45,54,55,71,98,99],[2,43],{49:$VI,50:$VJ,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU}),{45:[1,264]},{9:[1,265],75:266,76:$V51,78:$V61},o($Vj,[2,74]),o($V81,[2,76]),{18:77,32:$Vo,36:267,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{55:$V91,77:268},o($V41,[2,63]),{44:[1,270]},{9:[1,271],71:$VY},{48:[1,272]},{11:[2,39],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($Vj,[2,42]),{18:77,32:$Vo,36:273,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},o($Vj,[2,41]),o($Vj,[2,48]),o($Vj,[2,49]),{34:[1,274]},{40:[1,275],41:[1,276],43:[1,277]},{34:[1,278]},o($Vj,[2,50]),o($VX,[2,107]),o($Vj,[2,73]),o($V81,[2,75]),{49:$VI,50:$VJ,54:$VK,55:$V91,77:279,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($V81,[2,78]),o($V81,[2,80],{6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,42:24,4:280,2:$V0,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi}),{47:[1,281]},{11:[2,37]},{49:[1,282]},{11:[2,45],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},{7:283,8:$Vn},{34:[2,69]},{34:[2,70]},{18:77,32:$Vo,36:284,39:$Vp,47:$Vq,53:84,56:85,79:86,80:$Vr,81:$Vs,82:$Vt,83:$Vu,84:$Vv,85:$Vw,86:$Vx,87:$Vy,89:$Vz,100:$VA,101:$VB,102:$VC,103:$VD,104:$VE},{7:285,8:$Vn},o($V81,[2,77]),o($V81,[2,79],{10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:18,26:19,27:20,28:21,29:22,42:24,6:44,2:$V0,30:$V1,31:$V2,35:$V3,37:$V4,38:$V5,39:$V6,48:$V7,57:$V8,60:$V9,61:$Va,62:$Vb,65:$Vc,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh,72:$Vi}),{45:[1,286]},{42:287,66:$Vd,67:$Ve,68:$Vf,69:$Vg,70:$Vh},o($Vj,[2,51]),{34:[2,71],49:$VI,50:$VJ,54:$VK,88:$VL,89:$VM,90:$VN,91:$VO,92:$VP,93:$VQ,94:$VR,95:$VS,96:$VT,97:$VU,98:$VV,99:$VW},o($Vj,[2,52]),{11:[2,36]},{50:[1,288]},{11:[2,38]}],
defaultActions: {43:[2,1],62:[2,32],63:[2,33],70:[2,26],169:[2,27],271:[2,37],275:[2,69],276:[2,70],286:[2,36],288:[2,38]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let DeclararArreglo             =   require("../Instrucciones/DeclararArreglo").DeclararArreglo;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let AsignacionVector            =   require("../Instrucciones/AsignacionVector").AsignacionVector;
    let Ternario                    =   require("../Expresiones/Ternario").Ternario;
    let If                          =   require("../Instrucciones/If").If;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let AccesoLista                 =   require("../Expresiones/AccesoLista").AccesoLista;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let LlamadaPrint                =   require("../Expresiones/LlamadaPrint").LlamadaPrint;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let FuncionLenguaje             =   require("../Expresiones/FuncionLenguaje").FuncionLenguaje;
    let While                       =   require("../Instrucciones/While").While;
    let ReturnPR                    =   require("../Expresiones/ReturnPR").ReturnPR;
    let Continue                    =   require("../Expresiones/Continue").Continue;
    let Break                       =   require("../Expresiones/Break").Break;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let Incremento                  =   require("../Instrucciones/Incremento").Incremento;
    let Decremento                  =    require("../Instrucciones/Decremento").Decremento;
    let For                         =    require("../Instrucciones/For").For;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Casteo                      =    require("../Expresiones/Casteo").Casteo;
    let InsertarLista               =    require("../Instrucciones/InsertarLista").InsertarLista;
    let ModificarLista              =    require("../Instrucciones/ModificarLista").ModificarLista;
    let Switch                      =   require("../Instrucciones/Switch").Switch;
    let CaseSwitch                  =    require("../Instrucciones/CaseSwitch").CaseSwitch;
    let Error                       =    require("../Tabla/Error").Error;
    let TablaError                   =    require("../Tabla/TablaError").TablaError;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 103;     
break;
case 5:   return 104;    
break;
case 6:   return 66;  
break;
case 7:   return 67;  
break;
case 8:   return 69;   
break;
case 9:   return 68;   
break;
case 10:   return 70;   
break;
case 11:   return 57;       
break;
case 12:   return 61;    
break;
case 13:   return 62;    
break;
case 14:   return 59;     
break;
case 15:   return 65;     
break;
case 16:   return 35;   
break;
case 17:   return 46;     
break;
case 18:   return 60;     
break;
case 19:   return 48;     
break;
case 20:   return 52;     
break;
case 21:   return 72;     
break;
case 22:   return 76;     
break;
case 23:   return 78;     
break;
case 24:   return 80;     
break;
case 25:   return 81;     
break;
case 26:   return 82;     
break;
case 27:   return 83;     
break;
case 28:   return 87;     
break;
case 29:   return 86;     
break;
case 30:   return 85;     
break;
case 31:   return 84;     
break;
case 32:   return 30;     
break;
case 33:   return 31;    
break;
case 34:   return 37;    
break;
case 35:   return 38;    
break;
case 36:yy_.yytext = yy_.yytext.toLowerCase();          return 39;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 102;
break;
case 38:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 101
break;
case 39:return 100
break;
case 40:return 47
break;
case 41:return '$'
break;
case 42:return 51
break;
case 43:return 40;
break;
case 44:return 41;
break;
case 45:return 88;
break;
case 46:return 89;
break;
case 47:return 90;
break;
case 48:return 91;
break;
case 49:return 92;
break;
case 50:return 93;
break;
case 51:return 32;
break;
case 52:return 34;
break;
case 53:return 94;
break;
case 54:return 43;
break;
case 55:return 71;
break;
case 56:return 55;
break;
case 57:return 11;
break;
case 58:return 54;
break;
case 59:return 99;
break;
case 60:return 98;
break;
case 61:return 95;
break;
case 62:return '!';
break;
case 63:return 96;
break;
case 64:return 97;
break;
case 65:return 50;
break;
case 66:return 49;
break;
case 67:return 8;
break;
case 68:return 9;
break;
case 69:return 44;
break;
case 70:return 45;
break;
case 71:  TablaError.insertarError(new Error("Lexico", `El caracter: "${yy_.yytext}" no pertenece al lenguaje`, yy_.yylloc.first_line,yy_.yylloc.first_column)); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:length\b)/,/^(?:typeOf\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:main\b)/,/^(?:print\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:([a-zA-Z√ë√±]|(_[a-zA-Z√ë√±]))([a-zA-Z√ë√±]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}