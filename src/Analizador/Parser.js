/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,18],$V2=[1,21],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,19],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[5,9,25,33,42,45,46,47,51,52,53,54,55,56],$Vd=[1,39],$Ve=[1,42],$Vf=[1,45],$Vg=[1,51],$Vh=[25,28,35,41],$Vi=[2,20],$Vj=[1,53],$Vk=[1,61],$Vl=[1,63],$Vm=[1,60],$Vn=[1,72],$Vo=[1,73],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,59],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[1,68],$VB=[1,109],$VC=[1,110],$VD=[1,115],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,114],$VP=[9,11,29,34,35,41,57,59,60,78,79,80,81,82,83,84,85,86,87,88],$VQ=[1,132],$VR=[9,41,57],$VS=[5,9,25,33,42,44,45,46,47,51,52,53,54,55,56],$VT=[1,141],$VU=[41,57],$VV=[9,11,29,34,35,41,57,59,60,78,79,83,84,85,86,87,88],$VW=[9,11,29,34,35,41,57,59,60,78,79,80,81,83,84,85,86,87,88],$VX=[9,11,29,41,57,59,60,83,84,87,88],$VY=[9,11,29,34,35,41,57,59,60,83,84,85,86,87,88],$VZ=[1,222];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"BLOQUE_SENTENCAS":7,"{":8,"}":9,"DECLARACION":10,";":11,"FUNCION":12,"ASIGNACION":13,"VECTOR_ADD":14,"LISTA_ADD":15,"LISTA_MODIFICAR":16,"IF":17,"LLAMADA_FUNCION":18,"WHILE":19,"DO_WHILE":20,"INCREMENTO":21,"DECREMENTO":22,"FOR":23,"TIPO":24,"id":25,"=":26,"EXP":27,"[":28,"]":29,"tnew":30,"entero":31,"LISTA_EXP":32,"tlist":33,"<":34,">":35,"++":36,"--":37,".":38,"tadd":39,"(":40,")":41,"tif":42,"ELSE":43,"telse":44,"twhile":45,"tdo":46,"tfor":47,"ACTUALIZACION_FOR":48,"CASTEO":49,"LISTA_PARAM":50,"tvoid":51,"tinteger":52,"tboolean":53,"tstring":54,"tdouble":55,"tchar":56,",":57,"TERNARIA":58,"?":59,":":60,"SWITCH":61,"tswitch":62,"BLOQUE_SWITCH":63,"L_CASE":64,"CASE":65,"tcase":66,"BLOCK_CASES":67,"tdefaul":68,"FUNCIONES_LENGUAJE":69,"ttoLower":70,"ttoUpper":71,"tlength":72,"ttruncate":73,"tround":74,"ttostring":75,"ttochararray":76,"ttypeof":77,"+":78,"-":79,"*":80,"/":81,"^":82,"==":83,"!=":84,"<=":85,">=":86,"&&":87,"||":88,"decimal":89,"caracter":90,"cadena":91,"ttrue":92,"tfalse":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"{",9:"}",11:";",25:"id",26:"=",28:"[",29:"]",30:"tnew",31:"entero",33:"tlist",34:"<",35:">",36:"++",37:"--",38:".",39:"tadd",40:"(",41:")",42:"tif",44:"telse",45:"twhile",46:"tdo",47:"tfor",51:"tvoid",52:"tinteger",53:"tboolean",54:"tstring",55:"tdouble",56:"tchar",57:",",59:"?",60:":",62:"tswitch",66:"tcase",68:"tdefaul",70:"ttoLower",71:"ttoUpper",72:"tlength",73:"ttruncate",74:"tround",75:"ttostring",76:"ttochararray",77:"ttypeof",78:"+",79:"-",80:"*",81:"/",82:"^",83:"==",84:"!=",85:"<=",86:">=",87:"&&",88:"||",89:"decimal",90:"caracter",91:"cadena",92:"ttrue",93:"tfalse"},
productions_: [0,[3,2],[4,2],[4,1],[7,3],[7,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[10,4],[10,2],[10,10],[10,8],[10,11],[13,3],[21,2],[22,2],[14,7],[15,7],[16,8],[17,5],[17,6],[43,2],[43,2],[19,5],[20,7],[23,9],[23,9],[48,2],[48,2],[49,4],[12,6],[12,6],[12,5],[12,5],[24,1],[24,1],[24,1],[24,1],[24,1],[50,4],[50,2],[32,3],[32,1],[18,4],[58,5],[61,7],[63,3],[63,2],[64,2],[64,1],[65,3],[65,2],[67,2],[67,1],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[69,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,4],[27,6],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("Parse de Jison entrada: OK ");
        let raiz = new Raiz($$[$0-1]);
        this.$ = raiz;
        return raiz;
    
break;
case 2:

                $$[$0-1].push($$[$0]);
                this.$ = $$[$0-1];
            
break;
case 3:

                let lstsent = [];
                lstsent.push($$[$0]);
                this.$ = lstsent;
            
break;
case 4:

                       this.$ = $$[$0-1];
                
break;
case 5:

                        this.$ = [];
                
break;
case 6: case 8: case 11: case 13: case 16: case 17:
 this.$ = $$[$0-1]; 
break;
case 7: case 9: case 10: case 12: case 14: case 15: case 18: case 91:
 this.$ = $$[$0]; 
break;
case 19:

                this.$ = new DeclararVariable($$[$0-3], $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 20:

                this.$ = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
            
break;
case 21:

                this.$ = new DeclararArreglo($$[$0-9], $$[$0-6], $$[$0-3],undefined, $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
            
break;
case 22:

                this.$ = new DeclararArreglo($$[$0-7], $$[$0-4],undefined, $$[$0-1],undefined, _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 23:

                this.$ = new DeclararLista($$[$0-8], $$[$0-6], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
            
break;
case 24:

                this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
            
break;
case 25:

                this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 26:

                this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column)
            
break;
case 27:

                this.$ = new AsignacionVector($$[$0-6], $$[$0-1], $$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 28:

                this.$ = new InsertarLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
            
break;
case 29:

                this.$ = new ModificarLista($$[$0-7], $$[$0-4], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
            
break;
case 30:

            this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 31:

            this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 32:

            let else_sent = [];
            else_sent.push($$[$0]);
            this.$ = else_sent;
        
break;
case 33:

            this.$ = $$[$0];
        
break;
case 34:

            this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column );
        
break;
case 35:

            this.$ = new DoWhile($$[$0-5], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column );
        
break;
case 36: case 37:

            this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column );
        
break;
case 38:

           this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
        
break;
case 39:

           this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
        
break;
case 40:

        this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 41:

                this.$ = new DeclararFuncion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 42:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
            
break;
case 43:

                this.$ = new DeclararFuncion($$[$0-4], $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 44:

                this.$ = new DeclararFuncion(new Tipo(TipoPrimitivo.Void), $$[$0-3], [], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
            
break;
case 45:
 this.$ = new Tipo(TipoPrimitivo.Integer); 
break;
case 46:
 this.$ = new Tipo(TipoPrimitivo.Boolean); 
break;
case 47:
 this.$ = new Tipo(TipoPrimitivo.String);  
break;
case 48:
 this.$ = new Tipo(TipoPrimitivo.Double);  
break;
case 49:
 this.$ = new Tipo(TipoPrimitivo.Char);  
break;
case 50:

                $$[$0-3].push( new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-3].first_line, _$[$0-3].first_column) );
                this.$ = $$[$0-3];
            
break;
case 51:

                let decla1 = new DeclararVariable($$[$0-1], $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
                let params = [];
                params.push(decla1);
                this.$ = params;
            
break;
case 52:

            $$[$0-2].push($$[$0]);
            this.$ = $$[$0-2];
        
break;
case 53:
 
            let lista_exp = [];
            lista_exp.push($$[$0]);
            this.$ = lista_exp;
        
break;
case 54:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);    
break;
case 55:

            this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
        
break;
case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72:
this.$ = new FuncionLenguaje($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 73: case 74: case 75: case 76: case 77:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 78: case 98: case 99: case 100:
 this.$ = $$[$0];
break;
case 79:
 this.$ = $$[$0-1];
break;
case 80: case 81: case 82: case 83: case 84: case 85:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 86: case 87:
 this.$ = new OperacionLogica($$[$0-2], $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 88:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column);        
break;
case 89:
 this.$ = new AccesoVector($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);        
break;
case 90:
 this.$ = new AccesoLista($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 92:
 this.$ = new Valor($$[$0], "integer", _$[$0].first_line, _$[$0].first_column);
break;
case 93:
 this.$ = new Valor($$[$0], "double", _$[$0].first_line, _$[$0].first_column); 
break;
case 94:
 this.$ = new Valor($$[$0], "char", _$[$0].first_line, _$[$0].first_column);   
break;
case 95:
 this.$ = new Valor($$[$0], "string", _$[$0].first_line, _$[$0].first_column); 
break;
case 96:
 this.$ = new Valor($$[$0], "true", _$[$0].first_line, _$[$0].first_column);   
break;
case 97:
 this.$ = new Valor($$[$0], "false", _$[$0].first_line, _$[$0].first_column);  
break;
}
},
table: [{3:1,4:2,6:3,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V0,33:$V1,42:$V2,45:$V3,46:$V4,47:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{1:[3]},{5:[1,30],6:31,10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V0,33:$V1,42:$V2,45:$V3,46:$V4,47:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($Vc,[2,3]),{11:[1,32]},o($Vc,[2,7]),{11:[1,33]},o($Vc,[2,9]),o($Vc,[2,10]),{11:[1,34]},o($Vc,[2,12]),{11:[1,35]},o($Vc,[2,14]),o($Vc,[2,15]),{11:[1,36]},{11:[1,37]},o($Vc,[2,18]),{25:[1,38],28:$Vd},{34:[1,40]},{25:[1,41]},{26:$Ve,28:[1,43],36:[1,46],37:[1,47],38:[1,44],40:$Vf},{40:[1,48]},{40:[1,49]},{7:50,8:$Vg},{40:[1,52]},o($Vh,[2,45]),o($Vh,[2,46]),o($Vh,[2,47]),o($Vh,[2,48]),o($Vh,[2,49]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,6]),o($Vc,[2,8]),o($Vc,[2,11]),o($Vc,[2,13]),o($Vc,[2,16]),o($Vc,[2,17]),{11:$Vi,26:$Vj,40:[1,54]},{29:[1,55]},{24:56,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{40:[1,57]},{18:62,25:$Vk,27:58,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{28:[1,81],31:[1,80]},{39:[1,82]},{18:62,25:$Vk,27:84,31:$Vl,32:83,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{11:[2,25]},{11:[2,26]},{18:62,25:$Vk,27:85,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:86,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{45:[1,87]},{4:88,6:3,9:[1,89],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V0,33:$V1,42:$V2,45:$V3,46:$V4,47:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{10:90,13:91,24:92,25:[1,93],33:$V1,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{18:62,25:$Vk,27:94,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{24:97,41:[1,96],50:95,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{25:[1,98]},{35:[1,99]},{24:97,41:[1,101],50:100,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{11:[2,24],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{18:62,25:$Vk,27:116,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,24:118,25:$Vk,27:117,31:$Vl,40:$Vm,49:70,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VP,[2,88],{28:[1,119],40:$Vf}),o($VP,[2,91]),o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,95]),o($VP,[2,96]),o($VP,[2,97]),o($VP,[2,98]),o($VP,[2,99]),o($VP,[2,100]),{40:[1,120]},{40:[1,121]},{40:[1,122]},{40:[1,123]},{40:[1,124]},{40:[1,125]},{40:[1,126]},{40:[1,127]},{29:[1,128]},{31:[1,129]},{40:[1,130]},{41:[1,131],57:$VQ},o($VR,[2,53],{34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO}),{34:$VB,35:$VC,41:[1,133],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,134],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{40:[1,135]},{6:31,9:[1,136],10:4,12:5,13:6,14:7,15:8,16:9,17:10,18:11,19:12,20:13,21:14,22:15,23:16,24:17,25:$V0,33:$V1,42:$V2,45:$V3,46:$V4,47:$V5,51:$V6,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($VS,[2,5]),{11:[1,137]},{11:[1,138]},{25:[1,139],28:$Vd},{26:$Ve},{11:[2,19],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{41:[1,140],57:$VT},{7:142,8:$Vg},{25:[1,143]},{26:[1,144]},{25:[1,145]},{41:[1,146],57:$VT},{7:147,8:$Vg},{18:62,25:$Vk,27:148,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:149,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:150,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:151,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:152,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:153,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:154,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:155,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:156,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:157,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:158,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:159,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:160,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:161,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VP,[2,78]),{34:$VB,35:$VC,41:[1,162],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{41:[1,163]},{18:62,25:$Vk,27:164,28:[1,165],31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:166,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:167,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:168,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:169,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:170,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:171,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:172,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:173,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{26:[1,174]},{29:[1,175]},{18:62,25:$Vk,27:176,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VP,[2,54]),{18:62,25:$Vk,27:177,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{7:178,8:$Vg},{7:179,8:$Vg},{18:62,25:$Vk,27:180,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VS,[2,4]),{18:62,25:$Vk,27:181,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{18:62,25:$Vk,27:182,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{11:$Vi,26:$Vj},{7:183,8:$Vg},{24:184,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($Vc,[2,43]),o($VU,[2,51]),{8:[1,186],30:[1,185]},{26:[1,187]},{7:188,8:$Vg},o($Vc,[2,44]),o($VV,[2,73],{80:$VG,81:$VH,82:$VI}),o($VV,[2,74],{80:$VG,81:$VH,82:$VI}),o($VW,[2,75],{82:$VI}),o($VW,[2,76],{82:$VI}),o($VW,[2,77],{82:$VI}),o($VX,[2,80],{34:$VB,35:$VC,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,85:$VL,86:$VM}),o($VX,[2,81],{34:$VB,35:$VC,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,85:$VL,86:$VM}),o($VY,[2,82],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI}),o($VY,[2,83],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI}),o($VY,[2,84],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI}),o($VY,[2,85],{78:$VE,79:$VF,80:$VG,81:$VH,82:$VI}),o([9,11,29,41,57,60,87,88],[2,86],{34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),o([9,11,29,41,57,60,88],[2,87],{34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN}),{34:$VB,35:$VC,59:$VD,60:[1,189],78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},o($VP,[2,79]),{18:62,25:$Vk,27:190,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{29:[1,191],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{18:62,25:$Vk,27:192,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{34:$VB,35:$VC,41:[1,193],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,194],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,195],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,196],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,197],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,198],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,199],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{34:$VB,35:$VC,41:[1,200],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{18:62,25:$Vk,27:201,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{29:[1,202]},{34:$VB,35:$VC,41:[1,203],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},o($VR,[2,52],{34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO}),o($Vc,[2,30],{43:204,44:[1,205]}),o($Vc,[2,34]),{34:$VB,35:$VC,41:[1,206],59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{11:[1,207],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{11:[1,208],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},o($Vc,[2,41]),{25:[1,209]},{24:210,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},{18:62,25:$Vk,27:84,31:$Vl,32:211,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},{30:[1,212]},o($Vc,[2,42]),{18:62,25:$Vk,27:213,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($VP,[2,40]),o($VP,[2,89]),{29:[1,214],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},o($VP,[2,65]),o($VP,[2,66]),o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,71]),o($VP,[2,72]),{11:[1,215],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{26:[1,216]},{11:[1,217]},o($Vc,[2,31]),{7:219,8:$Vg,17:218,42:$V2},{11:[1,220]},{25:$VZ,48:221},{25:$VZ,48:223},o($VU,[2,50]),{28:[1,224]},{9:[1,225],57:$VQ},{33:[1,226]},o([9,11,29,41,57,59,60,87,88],[2,55],{34:$VB,35:$VC,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM}),{29:[1,227]},o($Vc,[2,27]),{18:62,25:$Vk,27:228,31:$Vl,40:$Vm,49:70,58:69,69:71,70:$Vn,71:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,79:$Vv,89:$Vw,90:$Vx,91:$Vy,92:$Vz,93:$VA},o($Vc,[2,28]),o($Vc,[2,32]),o($Vc,[2,33]),o($Vc,[2,35]),{41:[1,229]},{36:[1,230],37:[1,231]},{41:[1,232]},{31:[1,233]},{11:[2,22]},{34:[1,234]},o($VP,[2,90]),{11:[2,29],34:$VB,35:$VC,59:$VD,78:$VE,79:$VF,80:$VG,81:$VH,82:$VI,83:$VJ,84:$VK,85:$VL,86:$VM,87:$VN,88:$VO},{7:235,8:$Vg},{41:[2,38]},{41:[2,39]},{7:236,8:$Vg},{29:[1,237]},{24:238,52:$V7,53:$V8,54:$V9,55:$Va,56:$Vb},o($Vc,[2,36]),o($Vc,[2,37]),{11:[2,21]},{35:[1,239]},{11:[2,23]}],
defaultActions: {30:[2,1],46:[2,25],47:[2,26],225:[2,22],230:[2,38],231:[2,39],237:[2,21],239:[2,23]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let Raiz                        =   require("../Entorno/Raiz").Raiz;
    let Tipo                        =   require("../Entorno/Simbolos/Tipo").Tipo;
    let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
    let DeclararVariable            =   require("../Instrucciones/DeclararVariable").DeclararVariable; 
    let DeclararFuncion             =   require("../Instrucciones/DeclararFuncion").DeclararFuncion;
    let DeclararArreglo             =   require("../Instrucciones/DeclararArreglo").DeclararArreglo;
    let DeclararLista               =   require("../Instrucciones/DeclararLista").DeclararLista;
    let Asignacion                  =   require("../Instrucciones/Asignacion").Asignacion;
    let AsignacionVector            =   require("../Instrucciones/AsignacionVector").AsignacionVector;
    let If                          =   require("../Instrucciones/If").If;
    let Ternario                    =   require("../Expresiones/Ternario").Ternario;
    let Parametro                   =   require("../Instrucciones/Parametro").Parametro;
    let AccesoVariable              =   require("../Expresiones/AccesoVariable").AccesoVariable;
    let AccesoVector                =   require("../Expresiones/AccesoVector").AccesoVector;
    let AccesoLista                 =   require("../Expresiones/AccesoLista").AccesoLista;
    let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
    let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
    let OperacionLogica             =   require("../Expresiones/OperacionLogica").OperacionLogica;
    let OperacionRelacional         =   require("../Expresiones/OperacionRelacional").OperacionRelacional;
    let While                       =   require("../Instrucciones/While").While;
    let DoWhile                     =   require("../Instrucciones/DoWhile").DoWhile;
    let Valor                       =   require("../Expresiones/Valor").Valor;
    let Incremento                  =   require("../Instrucciones/Incremento").Incremento;
    let Decremento                  =    require("../Instrucciones/Decremento").Decremento;
    let For                         =    require("../Instrucciones/For").For;
    let Casteo                      =    require("../Expresiones/Casteo").Casteo;
    let InsertarLista               =    require("../Instrucciones/InsertarLista").InsertarLista;
    let ModificarLista              =    require("../Instrucciones/ModificarLista").ModificarLista;
    let FuncionLenguaje             =    require("../Expresiones/FuncionLenguaje").FuncionLenguaje;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 5;
break;
case 2:/* IGNORE */
break;
case 3:/* IGNORE */
break;
case 4:   return 92;     
break;
case 5:   return 93;    
break;
case 6:   return 52;  
break;
case 7:   return 53;  
break;
case 8:   return 55;   
break;
case 9:   return 54;   
break;
case 10:   return 56;   
break;
case 11:   return 42;       
break;
case 12:   return 45;    
break;
case 13:   return 47;    
break;
case 14:   return 44;     
break;
case 15:   return 51;     
break;
case 16:   return 'treturn';   
break;
case 17:   return 30;     
break;
case 18:   return 46;     
break;
case 19:   return 33;     
break;
case 20:   return 39;     
break;
case 21:   return 62;     
break;
case 22:   return 66;     
break;
case 23:   return 68;     
break;
case 24:   return 70;     
break;
case 25:   return 71;     
break;
case 26:   return 72;     
break;
case 27:   return 73;     
break;
case 28:   return 74;     
break;
case 29:   return 75;     
break;
case 30:   return 76;     
break;
case 31:   return 77;     
break;
case 32:yy_.yytext = yy_.yytext.toLowerCase();          return 25;
break;
case 33:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 91;
break;
case 34:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);     return 90
break;
case 35:return 89
break;
case 36:return 31
break;
case 37:return '$'
break;
case 38:return 38
break;
case 39:return 36;
break;
case 40:return 37;
break;
case 41:return 78;
break;
case 42:return 79;
break;
case 43:return 80;
break;
case 44:return 81;
break;
case 45:return 82;
break;
case 46:return '%';
break;
case 47:return 40;
break;
case 48:return 41;
break;
case 49:return 83;
break;
case 50:return 26;
break;
case 51:return 57;
break;
case 52:return 60;
break;
case 53:return 11;
break;
case 54:return 59;
break;
case 55:return 88;
break;
case 56:return 87;
break;
case 57:return 84;
break;
case 58:return '!';
break;
case 59:return 85;
break;
case 60:return 86;
break;
case 61:return 35;
break;
case 62:return 34;
break;
case 63:return 8;
break;
case 64:return 9;
break;
case 65:return 28;
break;
case 66:return 29;
break;
case 67:return 'num';
break;
case 68:
break;
}
},
rules: [/^(?:\s+)/,/^(?:$)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:true\b)/,/^(?:false\b)/,/^(?:int\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:char\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:else\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:new\b)/,/^(?:do\b)/,/^(?:list\b)/,/^(?:add\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:defaul\b)/,/^(?:toLower\b)/,/^(?:toUpper\b)/,/^(?:length\b)/,/^(?:truncate\b)/,/^(?:round\b)/,/^(?:toString\b)/,/^(?:toCharArray\b)/,/^(?:typeOf\b)/,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/,/^(?:"(?:[(\[)|(\])]|["\\"]["bnrt/["\\"]|[^"["\\"])*")/,/^(?:'(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])')/,/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))\b)/,/^(?:((?:[0-9]|[1-9][0-9]+))\b)/,/^(?:\$)/,/^(?:\.)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:==)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:digit\b)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}